# Izaak's take on bash completion, with hopefully a bit less voodoo

function toot () {
   if test "$3"; then
      file="$(apparix -favour rOl "$1" "$2")/$3"
   elif test "$2"; then
      file="$(apparix -favour rOl "$1")/$2"
   else
      echo "toot tag dir file OR toot tag file"
      return
   fi
   if [[ $? == 0 ]]; then
      $EDITOR $file
   fi
}

function annot () {
   toot $@ ANNOT
}

function todo () {
   toot $@ TODO
}

function clog () {
   toot $@ ChangeLog
}

function note () {
   toot $@ NOTES
}

function ald () {
  if test "$2"; then
    loc=$(apparix -favour rOl "$1" "$2")
  elif test "$1"; then
    loc=$(apparix --try-current-first -favour rOl "$1")
  fi
  if [[ $? == 0 ]]; then
    ls "$loc"
  fi
}

function als () {
  loc=$(apparix -favour rOl "$1")
  if test "$1"; then
    loc=$(apparix -favour rOl "$1")
  fi
  if [[ $? == 0 ]]; then
     if test "$2"; then
       ls "$loc"/$2
    else
       ls "$loc"
    fi
  fi
}

function als1 () {
  if test "$2"; then
    loc=$(apparix -favour rOl "$1" "$2")
  elif test "$1"; then
    loc=$(apparix --try-current-first -favour rOl "$1")
  fi
  if [[ $? == 0 ]]; then
    ls "$loc"
  fi
}


function ae () {
  if test "$2"; then
    loc=$(apparix -favour rOl "$1" "$2")
  elif test "$1"; then
    loc=$(apparix --try-current-first -favour rOl "$1")
  fi
  if [[ $? == 0 ]]; then
    files=$(ls $loc)
    if [[ $? == 0 ]]; then
       $EDITOR $files
    else
      echo "no listing for $loc"
    fi
  fi
}

function whence () {
  if test "$2"; then
    loc=$(apparix -pick $2 "$1")
  elif test "$1"; then
   loc=$(apparix "$1")
  else
    loc=$HOME
  fi
  if [[ $? == 0 ]]; then
    cd "$loc"
  fi
}


function to () {
  true
  if test "$2"; then
    loc=$(apparix --try-current-last -favour rOl "$1" "$2")
  elif test "$1"; then
    if test "$1" == '-'; then
      loc="-"
    else
      loc=$(apparix --try-current-last -favour rOl "$1")
    fi
  else
    loc=$HOME
  fi
  if [[ $? == 0 ]]; then
    cd "$loc"
  fi
}

function bm () {
  if test "$2"; then
    apparix --add-mark "$1" "$2";
  elif test "$1"; then
    apparix --add-mark "$1";
  else
    apparix --add-mark;
  fi
}

function portal () {
  if test "$1"; then
    apparix --add-portal "$1";
  else
    apparix --add-portal;
  fi
}

# function to complete sensibly on filenames and directories
# https://stackoverflow.com/questions/12933362/getting-compgen-to-include-slashes-on-directories-when-looking-for-files
function _my_compgen {
    local cur="$1"

    # Files, excluding directories:
    grep -v -F -f <(compgen -d -P ^ -S '$' -- "$cur") \
        <(compgen -f -P ^ -S '$' -- "$cur") |
        sed -e 's/^\^//' -e 's/\$$/ /'

    # Directories:
    compgen -d -S / -- "$cur"
}

# function completing a file, used by _apparix_comp
function _apparix_comp_file {
  local caller="$1"
  local cur_file="$2"
  case $caller in
    to|als) # complete on directories. this is easy with compgen
      compgen -d -S / -- "$cur_file"
      ;;
    ae) # complete on filenames. this is a little harder to do nicely
      _my_compgen "$cur_file"
      ;;
    *)
      echo "please register this function in ~/.bash_apparix:_apparix_dirs" 1>&2
      ;;
  esac
}

# function to complete an apparix tag followed by a file inside that tag's
# directory
function _apparix_comp {
  local tag="${COMP_WORDS[1]}"
  COMPREPLY=()
  if [[ $COMP_CWORD == 1 ]]; then
    local tags=( $(cut -f2 -d, $HOME/.apparix{rc,expand}) )
    COMPREPLY=( $(compgen -W "${tags[*]}" -- "$tag") )
  else
    local cur_file="${COMP_WORDS[2]}"
    local app_dir=$(apparix --try-current-last -favour rOl $tag 2>/dev/null)
    if [[ -d $app_dir ]]; then
        # run in subshell so cd isn't permanent
        COMPREPLY=( $(cd $app_dir && _apparix_comp_file $1 $cur_file) )
    else
        COMPREPLY=()
    fi
  fi
  return 0
}

# register completions
complete -o nospace -F _apparix_comp to als ae

export APPARIXLOG=$HOME/.apparixlog

alias via='vi $HOME/.apparixrc'

alias now='cd $(a now)'
